/**
 * This class is generated by jOOQ
 */
package jooq.steve.db;


import javax.annotation.Generated;

import jooq.steve.db.tables.Chargebox;
import jooq.steve.db.tables.Connector;
import jooq.steve.db.tables.ConnectorMetervalue;
import jooq.steve.db.tables.ConnectorStatus;
import jooq.steve.db.tables.Reservation;
import jooq.steve.db.tables.SchemaVersion;
import jooq.steve.db.tables.Transaction;
import jooq.steve.db.tables.User;
import jooq.steve.db.tables.records.ChargeboxRecord;
import jooq.steve.db.tables.records.ConnectorMetervalueRecord;
import jooq.steve.db.tables.records.ConnectorRecord;
import jooq.steve.db.tables.records.ConnectorStatusRecord;
import jooq.steve.db.tables.records.ReservationRecord;
import jooq.steve.db.tables.records.SchemaVersionRecord;
import jooq.steve.db.tables.records.TransactionRecord;
import jooq.steve.db.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>stevedb</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<ConnectorRecord, Integer> IDENTITY_CONNECTOR = Identities0.IDENTITY_CONNECTOR;
	public static final Identity<ReservationRecord, Integer> IDENTITY_RESERVATION = Identities0.IDENTITY_RESERVATION;
	public static final Identity<TransactionRecord, Integer> IDENTITY_TRANSACTION = Identities0.IDENTITY_TRANSACTION;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<ChargeboxRecord> KEY_CHARGEBOX_PRIMARY = UniqueKeys0.KEY_CHARGEBOX_PRIMARY;
	public static final UniqueKey<ChargeboxRecord> KEY_CHARGEBOX_CHARGEBOXID_UNIQUE = UniqueKeys0.KEY_CHARGEBOX_CHARGEBOXID_UNIQUE;
	public static final UniqueKey<ConnectorRecord> KEY_CONNECTOR_PRIMARY = UniqueKeys0.KEY_CONNECTOR_PRIMARY;
	public static final UniqueKey<ConnectorRecord> KEY_CONNECTOR_CONNECTOR_PK_UNIQUE = UniqueKeys0.KEY_CONNECTOR_CONNECTOR_PK_UNIQUE;
	public static final UniqueKey<ConnectorRecord> KEY_CONNECTOR_CONNECTOR_CBID_CID_UNIQUE = UniqueKeys0.KEY_CONNECTOR_CONNECTOR_CBID_CID_UNIQUE;
	public static final UniqueKey<ReservationRecord> KEY_RESERVATION_PRIMARY = UniqueKeys0.KEY_RESERVATION_PRIMARY;
	public static final UniqueKey<ReservationRecord> KEY_RESERVATION_RESERVATION_PK_UNIQUE = UniqueKeys0.KEY_RESERVATION_RESERVATION_PK_UNIQUE;
	public static final UniqueKey<ReservationRecord> KEY_RESERVATION_TRANSACTION_PK_UNIQUE = UniqueKeys0.KEY_RESERVATION_TRANSACTION_PK_UNIQUE;
	public static final UniqueKey<SchemaVersionRecord> KEY_SCHEMA_VERSION_PRIMARY = UniqueKeys0.KEY_SCHEMA_VERSION_PRIMARY;
	public static final UniqueKey<TransactionRecord> KEY_TRANSACTION_PRIMARY = UniqueKeys0.KEY_TRANSACTION_PRIMARY;
	public static final UniqueKey<TransactionRecord> KEY_TRANSACTION_TRANSACTION_PK_UNIQUE = UniqueKeys0.KEY_TRANSACTION_TRANSACTION_PK_UNIQUE;
	public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;
	public static final UniqueKey<UserRecord> KEY_USER_IDTAG_UNIQUE = UniqueKeys0.KEY_USER_IDTAG_UNIQUE;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	public static final ForeignKey<ConnectorRecord, ChargeboxRecord> FK_CHARGEBOXID_C = ForeignKeys0.FK_CHARGEBOXID_C;
	public static final ForeignKey<ConnectorMetervalueRecord, ConnectorRecord> FK_PK_CM = ForeignKeys0.FK_PK_CM;
	public static final ForeignKey<ConnectorMetervalueRecord, TransactionRecord> FK_TID_CM = ForeignKeys0.FK_TID_CM;
	public static final ForeignKey<ConnectorStatusRecord, ConnectorRecord> FK_CS_PK = ForeignKeys0.FK_CS_PK;
	public static final ForeignKey<ReservationRecord, TransactionRecord> FK_TRANSACTION_PK_R = ForeignKeys0.FK_TRANSACTION_PK_R;
	public static final ForeignKey<ReservationRecord, UserRecord> FK_IDTAG_R = ForeignKeys0.FK_IDTAG_R;
	public static final ForeignKey<ReservationRecord, ChargeboxRecord> FK_CHARGEBOXID_R = ForeignKeys0.FK_CHARGEBOXID_R;
	public static final ForeignKey<TransactionRecord, ConnectorRecord> FK_CONNECTOR_PK_T = ForeignKeys0.FK_CONNECTOR_PK_T;
	public static final ForeignKey<TransactionRecord, UserRecord> FK_IDTAG_T = ForeignKeys0.FK_IDTAG_T;
	public static final ForeignKey<UserRecord, UserRecord> FK_USER_PARENTIDTAG = ForeignKeys0.FK_USER_PARENTIDTAG;

	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<ConnectorRecord, Integer> IDENTITY_CONNECTOR = createIdentity(Connector.CONNECTOR, Connector.CONNECTOR.CONNECTOR_PK);
		public static Identity<ReservationRecord, Integer> IDENTITY_RESERVATION = createIdentity(Reservation.RESERVATION, Reservation.RESERVATION.RESERVATION_PK);
		public static Identity<TransactionRecord, Integer> IDENTITY_TRANSACTION = createIdentity(Transaction.TRANSACTION, Transaction.TRANSACTION.TRANSACTION_PK);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<ChargeboxRecord> KEY_CHARGEBOX_PRIMARY = createUniqueKey(Chargebox.CHARGEBOX, Chargebox.CHARGEBOX.CHARGEBOXID);
		public static final UniqueKey<ChargeboxRecord> KEY_CHARGEBOX_CHARGEBOXID_UNIQUE = createUniqueKey(Chargebox.CHARGEBOX, Chargebox.CHARGEBOX.CHARGEBOXID);
		public static final UniqueKey<ConnectorRecord> KEY_CONNECTOR_PRIMARY = createUniqueKey(Connector.CONNECTOR, Connector.CONNECTOR.CONNECTOR_PK);
		public static final UniqueKey<ConnectorRecord> KEY_CONNECTOR_CONNECTOR_PK_UNIQUE = createUniqueKey(Connector.CONNECTOR, Connector.CONNECTOR.CONNECTOR_PK);
		public static final UniqueKey<ConnectorRecord> KEY_CONNECTOR_CONNECTOR_CBID_CID_UNIQUE = createUniqueKey(Connector.CONNECTOR, Connector.CONNECTOR.CHARGEBOXID, Connector.CONNECTOR.CONNECTORID);
		public static final UniqueKey<ReservationRecord> KEY_RESERVATION_PRIMARY = createUniqueKey(Reservation.RESERVATION, Reservation.RESERVATION.RESERVATION_PK);
		public static final UniqueKey<ReservationRecord> KEY_RESERVATION_RESERVATION_PK_UNIQUE = createUniqueKey(Reservation.RESERVATION, Reservation.RESERVATION.RESERVATION_PK);
		public static final UniqueKey<ReservationRecord> KEY_RESERVATION_TRANSACTION_PK_UNIQUE = createUniqueKey(Reservation.RESERVATION, Reservation.RESERVATION.TRANSACTION_PK);
		public static final UniqueKey<SchemaVersionRecord> KEY_SCHEMA_VERSION_PRIMARY = createUniqueKey(SchemaVersion.SCHEMA_VERSION, SchemaVersion.SCHEMA_VERSION.VERSION);
		public static final UniqueKey<TransactionRecord> KEY_TRANSACTION_PRIMARY = createUniqueKey(Transaction.TRANSACTION, Transaction.TRANSACTION.TRANSACTION_PK);
		public static final UniqueKey<TransactionRecord> KEY_TRANSACTION_TRANSACTION_PK_UNIQUE = createUniqueKey(Transaction.TRANSACTION, Transaction.TRANSACTION.TRANSACTION_PK);
		public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = createUniqueKey(User.USER, User.USER.IDTAG);
		public static final UniqueKey<UserRecord> KEY_USER_IDTAG_UNIQUE = createUniqueKey(User.USER, User.USER.IDTAG);
	}

	private static class ForeignKeys0 extends AbstractKeys {
		public static final ForeignKey<ConnectorRecord, ChargeboxRecord> FK_CHARGEBOXID_C = createForeignKey(jooq.steve.db.Keys.KEY_CHARGEBOX_PRIMARY, Connector.CONNECTOR, Connector.CONNECTOR.CHARGEBOXID);
		public static final ForeignKey<ConnectorMetervalueRecord, ConnectorRecord> FK_PK_CM = createForeignKey(jooq.steve.db.Keys.KEY_CONNECTOR_PRIMARY, ConnectorMetervalue.CONNECTOR_METERVALUE, ConnectorMetervalue.CONNECTOR_METERVALUE.CONNECTOR_PK);
		public static final ForeignKey<ConnectorMetervalueRecord, TransactionRecord> FK_TID_CM = createForeignKey(jooq.steve.db.Keys.KEY_TRANSACTION_PRIMARY, ConnectorMetervalue.CONNECTOR_METERVALUE, ConnectorMetervalue.CONNECTOR_METERVALUE.TRANSACTION_PK);
		public static final ForeignKey<ConnectorStatusRecord, ConnectorRecord> FK_CS_PK = createForeignKey(jooq.steve.db.Keys.KEY_CONNECTOR_PRIMARY, ConnectorStatus.CONNECTOR_STATUS, ConnectorStatus.CONNECTOR_STATUS.CONNECTOR_PK);
		public static final ForeignKey<ReservationRecord, TransactionRecord> FK_TRANSACTION_PK_R = createForeignKey(jooq.steve.db.Keys.KEY_TRANSACTION_PRIMARY, Reservation.RESERVATION, Reservation.RESERVATION.TRANSACTION_PK);
		public static final ForeignKey<ReservationRecord, UserRecord> FK_IDTAG_R = createForeignKey(jooq.steve.db.Keys.KEY_USER_PRIMARY, Reservation.RESERVATION, Reservation.RESERVATION.IDTAG);
		public static final ForeignKey<ReservationRecord, ChargeboxRecord> FK_CHARGEBOXID_R = createForeignKey(jooq.steve.db.Keys.KEY_CHARGEBOX_PRIMARY, Reservation.RESERVATION, Reservation.RESERVATION.CHARGEBOXID);
		public static final ForeignKey<TransactionRecord, ConnectorRecord> FK_CONNECTOR_PK_T = createForeignKey(jooq.steve.db.Keys.KEY_CONNECTOR_PRIMARY, Transaction.TRANSACTION, Transaction.TRANSACTION.CONNECTOR_PK);
		public static final ForeignKey<TransactionRecord, UserRecord> FK_IDTAG_T = createForeignKey(jooq.steve.db.Keys.KEY_USER_PRIMARY, Transaction.TRANSACTION, Transaction.TRANSACTION.IDTAG);
		public static final ForeignKey<UserRecord, UserRecord> FK_USER_PARENTIDTAG = createForeignKey(jooq.steve.db.Keys.KEY_USER_PRIMARY, User.USER, User.USER.PARENTIDTAG);
	}
}
