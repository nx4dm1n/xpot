/**
 * This class is generated by jOOQ
 */
package jooq.steve.db.tables;


import de.rwth.idsg.steve.utils.DateTimeConverter;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.steve.db.Keys;
import jooq.steve.db.Stevedb;
import jooq.steve.db.tables.records.TransactionRecord;

import org.joda.time.DateTime;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transaction extends TableImpl<TransactionRecord> {

	private static final long serialVersionUID = 619354800;

	/**
	 * The reference instance of <code>stevedb.transaction</code>
	 */
	public static final Transaction TRANSACTION = new Transaction();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TransactionRecord> getRecordType() {
		return TransactionRecord.class;
	}

	/**
	 * The column <code>stevedb.transaction.transaction_pk</code>.
	 */
	public final TableField<TransactionRecord, Integer> TRANSACTION_PK = createField("transaction_pk", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>stevedb.transaction.connector_pk</code>.
	 */
	public final TableField<TransactionRecord, Integer> CONNECTOR_PK = createField("connector_pk", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>stevedb.transaction.idTag</code>.
	 */
	public final TableField<TransactionRecord, String> IDTAG = createField("idTag", org.jooq.impl.SQLDataType.VARCHAR.length(15).nullable(false), this, "");

	/**
	 * The column <code>stevedb.transaction.startTimestamp</code>.
	 */
	public final TableField<TransactionRecord, DateTime> STARTTIMESTAMP = createField("startTimestamp", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateTimeConverter());

	/**
	 * The column <code>stevedb.transaction.startValue</code>.
	 */
	public final TableField<TransactionRecord, String> STARTVALUE = createField("startValue", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "");

	/**
	 * The column <code>stevedb.transaction.stopTimestamp</code>.
	 */
	public final TableField<TransactionRecord, DateTime> STOPTIMESTAMP = createField("stopTimestamp", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateTimeConverter());

	/**
	 * The column <code>stevedb.transaction.stopValue</code>.
	 */
	public final TableField<TransactionRecord, String> STOPVALUE = createField("stopValue", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "");

	/**
	 * Create a <code>stevedb.transaction</code> table reference
	 */
	public Transaction() {
		this("transaction", null);
	}

	/**
	 * Create an aliased <code>stevedb.transaction</code> table reference
	 */
	public Transaction(String alias) {
		this(alias, TRANSACTION);
	}

	private Transaction(String alias, Table<TransactionRecord> aliased) {
		this(alias, aliased, null);
	}

	private Transaction(String alias, Table<TransactionRecord> aliased, Field<?>[] parameters) {
		super(alias, Stevedb.STEVEDB, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<TransactionRecord, Integer> getIdentity() {
		return Keys.IDENTITY_TRANSACTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TransactionRecord> getPrimaryKey() {
		return Keys.KEY_TRANSACTION_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TransactionRecord>> getKeys() {
		return Arrays.<UniqueKey<TransactionRecord>>asList(Keys.KEY_TRANSACTION_PRIMARY, Keys.KEY_TRANSACTION_TRANSACTION_PK_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<TransactionRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<TransactionRecord, ?>>asList(Keys.FK_CONNECTOR_PK_T, Keys.FK_IDTAG_T);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Transaction as(String alias) {
		return new Transaction(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Transaction rename(String name) {
		return new Transaction(name, null);
	}
}
