/**
 * This class is generated by jOOQ
 */
package jooq.steve.db.tables.records;


import javax.annotation.Generated;

import jooq.steve.db.tables.ConnectorMetervalue;

import org.joda.time.DateTime;
import org.jooq.Field;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConnectorMetervalueRecord extends TableRecordImpl<ConnectorMetervalueRecord> implements Record9<Integer, Integer, DateTime, String, String, String, String, String, String> {

	private static final long serialVersionUID = -231319669;

	/**
	 * Setter for <code>stevedb.connector_metervalue.connector_pk</code>.
	 */
	public void setConnectorPk(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>stevedb.connector_metervalue.connector_pk</code>.
	 */
	public Integer getConnectorPk() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>stevedb.connector_metervalue.transaction_pk</code>.
	 */
	public void setTransactionPk(Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>stevedb.connector_metervalue.transaction_pk</code>.
	 */
	public Integer getTransactionPk() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>stevedb.connector_metervalue.valueTimestamp</code>.
	 */
	public void setValuetimestamp(DateTime value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>stevedb.connector_metervalue.valueTimestamp</code>.
	 */
	public DateTime getValuetimestamp() {
		return (DateTime) getValue(2);
	}

	/**
	 * Setter for <code>stevedb.connector_metervalue.value</code>.
	 */
	public void setValue(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>stevedb.connector_metervalue.value</code>.
	 */
	public String getValue() {
		return (String) getValue(3);
	}

	/**
	 * Setter for <code>stevedb.connector_metervalue.readingContext</code>.
	 */
	public void setReadingcontext(String value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>stevedb.connector_metervalue.readingContext</code>.
	 */
	public String getReadingcontext() {
		return (String) getValue(4);
	}

	/**
	 * Setter for <code>stevedb.connector_metervalue.format</code>.
	 */
	public void setFormat(String value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>stevedb.connector_metervalue.format</code>.
	 */
	public String getFormat() {
		return (String) getValue(5);
	}

	/**
	 * Setter for <code>stevedb.connector_metervalue.measurand</code>.
	 */
	public void setMeasurand(String value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>stevedb.connector_metervalue.measurand</code>.
	 */
	public String getMeasurand() {
		return (String) getValue(6);
	}

	/**
	 * Setter for <code>stevedb.connector_metervalue.location</code>.
	 */
	public void setLocation(String value) {
		setValue(7, value);
	}

	/**
	 * Getter for <code>stevedb.connector_metervalue.location</code>.
	 */
	public String getLocation() {
		return (String) getValue(7);
	}

	/**
	 * Setter for <code>stevedb.connector_metervalue.unit</code>.
	 */
	public void setUnit(String value) {
		setValue(8, value);
	}

	/**
	 * Getter for <code>stevedb.connector_metervalue.unit</code>.
	 */
	public String getUnit() {
		return (String) getValue(8);
	}

	// -------------------------------------------------------------------------
	// Record9 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row9<Integer, Integer, DateTime, String, String, String, String, String, String> fieldsRow() {
		return (Row9) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row9<Integer, Integer, DateTime, String, String, String, String, String, String> valuesRow() {
		return (Row9) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return ConnectorMetervalue.CONNECTOR_METERVALUE.CONNECTOR_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return ConnectorMetervalue.CONNECTOR_METERVALUE.TRANSACTION_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<DateTime> field3() {
		return ConnectorMetervalue.CONNECTOR_METERVALUE.VALUETIMESTAMP;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return ConnectorMetervalue.CONNECTOR_METERVALUE.VALUE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field5() {
		return ConnectorMetervalue.CONNECTOR_METERVALUE.READINGCONTEXT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field6() {
		return ConnectorMetervalue.CONNECTOR_METERVALUE.FORMAT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field7() {
		return ConnectorMetervalue.CONNECTOR_METERVALUE.MEASURAND;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field8() {
		return ConnectorMetervalue.CONNECTOR_METERVALUE.LOCATION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field9() {
		return ConnectorMetervalue.CONNECTOR_METERVALUE.UNIT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getConnectorPk();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getTransactionPk();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DateTime value3() {
		return getValuetimestamp();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getValue();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value5() {
		return getReadingcontext();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value6() {
		return getFormat();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value7() {
		return getMeasurand();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value8() {
		return getLocation();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value9() {
		return getUnit();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorMetervalueRecord value1(Integer value) {
		setConnectorPk(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorMetervalueRecord value2(Integer value) {
		setTransactionPk(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorMetervalueRecord value3(DateTime value) {
		setValuetimestamp(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorMetervalueRecord value4(String value) {
		setValue(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorMetervalueRecord value5(String value) {
		setReadingcontext(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorMetervalueRecord value6(String value) {
		setFormat(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorMetervalueRecord value7(String value) {
		setMeasurand(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorMetervalueRecord value8(String value) {
		setLocation(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorMetervalueRecord value9(String value) {
		setUnit(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectorMetervalueRecord values(Integer value1, Integer value2, DateTime value3, String value4, String value5, String value6, String value7, String value8, String value9) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		value8(value8);
		value9(value9);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ConnectorMetervalueRecord
	 */
	public ConnectorMetervalueRecord() {
		super(ConnectorMetervalue.CONNECTOR_METERVALUE);
	}

	/**
	 * Create a detached, initialised ConnectorMetervalueRecord
	 */
	public ConnectorMetervalueRecord(Integer connectorPk, Integer transactionPk, DateTime valuetimestamp, String value, String readingcontext, String format, String measurand, String location, String unit) {
		super(ConnectorMetervalue.CONNECTOR_METERVALUE);

		setValue(0, connectorPk);
		setValue(1, transactionPk);
		setValue(2, valuetimestamp);
		setValue(3, value);
		setValue(4, readingcontext);
		setValue(5, format);
		setValue(6, measurand);
		setValue(7, location);
		setValue(8, unit);
	}
}
