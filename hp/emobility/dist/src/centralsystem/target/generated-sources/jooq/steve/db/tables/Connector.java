/**
 * This class is generated by jOOQ
 */
package jooq.steve.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.steve.db.Keys;
import jooq.steve.db.Stevedb;
import jooq.steve.db.tables.records.ConnectorRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Connector extends TableImpl<ConnectorRecord> {

	private static final long serialVersionUID = -594631449;

	/**
	 * The reference instance of <code>stevedb.connector</code>
	 */
	public static final Connector CONNECTOR = new Connector();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ConnectorRecord> getRecordType() {
		return ConnectorRecord.class;
	}

	/**
	 * The column <code>stevedb.connector.connector_pk</code>.
	 */
	public final TableField<ConnectorRecord, Integer> CONNECTOR_PK = createField("connector_pk", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>stevedb.connector.chargeBoxId</code>.
	 */
	public final TableField<ConnectorRecord, String> CHARGEBOXID = createField("chargeBoxId", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

	/**
	 * The column <code>stevedb.connector.connectorId</code>.
	 */
	public final TableField<ConnectorRecord, Integer> CONNECTORID = createField("connectorId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>stevedb.connector</code> table reference
	 */
	public Connector() {
		this("connector", null);
	}

	/**
	 * Create an aliased <code>stevedb.connector</code> table reference
	 */
	public Connector(String alias) {
		this(alias, CONNECTOR);
	}

	private Connector(String alias, Table<ConnectorRecord> aliased) {
		this(alias, aliased, null);
	}

	private Connector(String alias, Table<ConnectorRecord> aliased, Field<?>[] parameters) {
		super(alias, Stevedb.STEVEDB, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ConnectorRecord, Integer> getIdentity() {
		return Keys.IDENTITY_CONNECTOR;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ConnectorRecord> getPrimaryKey() {
		return Keys.KEY_CONNECTOR_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ConnectorRecord>> getKeys() {
		return Arrays.<UniqueKey<ConnectorRecord>>asList(Keys.KEY_CONNECTOR_PRIMARY, Keys.KEY_CONNECTOR_CONNECTOR_PK_UNIQUE, Keys.KEY_CONNECTOR_CONNECTOR_CBID_CID_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ConnectorRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ConnectorRecord, ?>>asList(Keys.FK_CHARGEBOXID_C);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Connector as(String alias) {
		return new Connector(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Connector rename(String name) {
		return new Connector(name, null);
	}
}
